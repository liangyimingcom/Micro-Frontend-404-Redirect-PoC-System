AWSTemplateFormatVersion: '2010-09-09'
Description: '微前端404重定向PoC系统 - 完整基础设施模板'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "项目配置"
        Parameters:
          - ProjectName
          - Environment
      - Label:
          default: "Lambda@Edge配置"
        Parameters:
          - LambdaMemorySize
          - LambdaTimeout
      - Label:
          default: "CloudFront配置"
        Parameters:
          - PriceClass
          - EnableLogging
    ParameterLabels:
      ProjectName:
        default: "项目名称"
      Environment:
        default: "环境名称"

Parameters:
  ProjectName:
    Type: String
    Default: 'micro-frontend-404-poc'
    Description: '项目名称，用于资源命名'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: '只能包含小写字母、数字和连字符'
    
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'test', 'staging', 'prod']
    Description: '部署环境'
    
  LambdaMemorySize:
    Type: Number
    Default: 128
    MinValue: 128
    MaxValue: 3008
    Description: 'Lambda@Edge函数内存大小(MB)'
    
  LambdaTimeout:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 30
    Description: 'Lambda@Edge函数超时时间(秒)'
    
  PriceClass:
    Type: String
    Default: 'PriceClass_100'
    AllowedValues: 
      - 'PriceClass_All'
      - 'PriceClass_200'
      - 'PriceClass_100'
    Description: 'CloudFront价格等级'
    
  EnableLogging:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: '是否启用CloudFront访问日志'

Conditions:
  IsProduction: !Equals [!Ref Environment, 'prod']
  EnableAccessLogging: !Equals [!Ref EnableLogging, 'true']

Resources:
  # ==================== S3 存储桶 ====================
  
  # 主存储桶 - 托管静态文件
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-static-${AWS::AccountId}-${AWS::Region}'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: !If [IsProduction, 'Enabled', 'Suspended']
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'HEAD']
            AllowedOrigins: ['*']
            MaxAge: 3600
            ExposedHeaders: ['ETag']
      LifecycleConfiguration:
        Rules:
          - Id: 'DeleteIncompleteMultipartUploads'
            Status: 'Enabled'
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: 's3:ObjectCreated:*'
            CloudWatchConfiguration:
              LogGroupName: !Sub '/aws/s3/${ProjectName}-${Environment}'
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Purpose'
          Value: 'Static Website Hosting'
        - Key: 'ManagedBy'
          Value: 'CloudFormation'

  # 日志存储桶（如果启用访问日志）
  LoggingBucket:
    Type: AWS::S3::Bucket
    Condition: EnableAccessLogging
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-logs-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: 'DeleteOldLogs'
            Status: 'Enabled'
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Purpose'
          Value: 'Access Logs'

  # ==================== IAM 角色和策略 ====================
  
  # CloudFront Origin Access Identity
  OriginAccessIdentity:
    Type: AWS::CloudFront::OriginAccessIdentity
    Properties:
      OriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${ProjectName}-${Environment} static content'

  # S3存储桶策略
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowCloudFrontAccess'
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'
            Action: 's3:GetObject'
            Resource: !Sub '${S3Bucket}/*'
          - Sid: 'DenyDirectAccess'
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: 
              - !Sub '${S3Bucket}/*'
              - !Ref S3Bucket
            Condition:
              StringNotEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/*'
            NotPrincipal:
              AWS: 
                - !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${OriginAccessIdentity}'
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'

  # Lambda执行角色
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-edge-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'CloudWatchLogsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: 
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*'
                  - !Sub 'arn:aws:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*:*'
        - PolicyName: 'CloudWatchMetricsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': 'MicroFrontend/404Redirect'
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # ==================== Lambda@Edge 函数 ====================
  
  # Lambda@Edge函数
  LambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-404-redirect'
      Runtime: 'nodejs18.x'
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Code:
        ZipFile: |
          'use strict';
          
          // 临时占位符代码 - 将通过部署脚本更新
          const REDIRECT_RULES = {
              'website1': '/website1/index.html',
              'website2': '/website2/index.html',
              'app1': '/app1/index.html'
          };
          
          exports.handler = async (event) => {
              try {
                  const request = event.Records[0].cf.request;
                  const response = event.Records[0].cf.response;
                  
                  if (response.status !== '404') {
                      return response;
                  }
                  
                  const uri = request.uri;
                  const pathSegments = uri.split('/').filter(segment => segment);
                  
                  if (pathSegments.length === 0) {
                      return response;
                  }
                  
                  const subdir = pathSegments[0];
                  const redirectPath = REDIRECT_RULES[subdir];
                  
                  if (redirectPath) {
                      console.log(JSON.stringify({
                          timestamp: new Date().toISOString(),
                          event: 'redirect_executed',
                          originalUri: uri,
                          redirectPath: redirectPath
                      }));
                      
                      return {
                          status: '302',
                          statusDescription: 'Found',
                          headers: {
                              location: [{
                                  key: 'Location',
                                  value: redirectPath
                              }],
                              'cache-control': [{
                                  key: 'Cache-Control',
                                  value: 'no-cache, no-store, must-revalidate'
                              }]
                          }
                      };
                  }
                  
                  return response;
              } catch (error) {
                  console.error('Lambda@Edge Error:', error);
                  return event.Records[0].cf.response;
              }
          };
      Description: !Sub '微前端404重定向Lambda@Edge函数 - ${Environment}环境'
      Environment:
        Variables:
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Purpose'
          Value: '404 Redirect Handler'

  # Lambda函数版本
  LambdaFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaEdgeFunction
      Description: !Sub 'Version for ${Environment} environment - ${AWS::StackName}'

  # 死信队列
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-${Environment}-lambda-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # ==================== CloudFront 分发 ====================
  
  # CloudFront分发
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub '${ProjectName}-${Environment} 微前端404重定向PoC分发'
        Enabled: true
        HttpVersion: 'http2and3'
        PriceClass: !Ref PriceClass
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        
        # 源站配置
        Origins:
          - Id: 'S3Origin'
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${OriginAccessIdentity}'
            OriginShield:
              Enabled: !If [IsProduction, true, false]
              OriginShieldRegion: !If [IsProduction, !Ref 'AWS::Region', !Ref 'AWS::NoValue']
        
        # 默认缓存行为
        DefaultCacheBehavior:
          TargetOriginId: 'S3Origin'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
          CachedMethods: ['GET', 'HEAD']
          Compress: true
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad'  # CachingDisabled
          OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf'  # CORS-S3Origin
          ResponseHeadersPolicyId: '67f7725c-6f97-4210-82d7-5512b31e9d03'  # SecurityHeadersPolicy
          
          # Lambda@Edge函数关联
          LambdaFunctionAssociations:
            - EventType: 'origin-response'
              LambdaFunctionARN: !Ref LambdaFunctionVersion
              IncludeBody: false
        
        # 缓存行为配置
        CacheBehaviors:
          # 静态资源长期缓存
          - PathPattern: '*/assets/*'
            TargetOriginId: 'S3Origin'
            ViewerProtocolPolicy: 'redirect-to-https'
            AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'  # CachingOptimized
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf'
          
          # CSS文件缓存
          - PathPattern: '*.css'
            TargetOriginId: 'S3Origin'
            ViewerProtocolPolicy: 'redirect-to-https'
            AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf'
          
          # JavaScript文件缓存
          - PathPattern: '*.js'
            TargetOriginId: 'S3Origin'
            ViewerProtocolPolicy: 'redirect-to-https'
            AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf'
          
          # 图片文件缓存
          - PathPattern: '*.{jpg,jpeg,png,gif,webp,svg,ico}'
            TargetOriginId: 'S3Origin'
            ViewerProtocolPolicy: 'redirect-to-https'
            AllowedMethods: ['GET', 'HEAD']
            CachedMethods: ['GET', 'HEAD']
            Compress: true
            CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6'
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf'
        
        # 自定义错误响应
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 0
          - ErrorCode: 404
            ResponseCode: 404
            ErrorCachingMinTTL: 0
        
        # 访问日志配置
        Logging: !If
          - EnableAccessLogging
          - Bucket: !GetAtt LoggingBucket.DomainName
            Prefix: !Sub 'cloudfront-logs/${Environment}/'
            IncludeCookies: false
          - !Ref 'AWS::NoValue'
        
        # 地理限制（生产环境可配置）
        Restrictions:
          GeoRestriction:
            RestrictionType: 'none'
        
        # SSL证书配置
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: 'TLSv1.2_2021'
        
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Purpose'
          Value: 'Micro-frontend Distribution'

  # ==================== CloudWatch 监控 ====================
  
  # CloudWatch日志组
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LambdaEdgeFunction}'
      RetentionInDays: !If [IsProduction, 30, 7]
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # CloudWatch告警 - Lambda错误率
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-lambda-errors'
      AlarmDescription: 'Lambda@Edge函数错误率过高'
      MetricName: 'Errors'
      Namespace: 'AWS/Lambda'
      Statistic: 'Sum'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref LambdaEdgeFunction
      TreatMissingData: 'notBreaching'
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # CloudWatch告警 - Lambda执行时间
  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-lambda-duration'
      AlarmDescription: 'Lambda@Edge函数执行时间过长'
      MetricName: 'Duration'
      Namespace: 'AWS/Lambda'
      Statistic: 'Average'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1000
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'FunctionName'
          Value: !Ref LambdaEdgeFunction
      TreatMissingData: 'notBreaching'
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # CloudWatch告警 - CloudFront错误率
  CloudFrontErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-cloudfront-errors'
      AlarmDescription: 'CloudFront 4xx错误率过高'
      MetricName: '4xxErrorRate'
      Namespace: 'AWS/CloudFront'
      Statistic: 'Average'
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: 'GreaterThanThreshold'
      Dimensions:
        - Name: 'DistributionId'
          Value: !Ref CloudFrontDistribution
      TreatMissingData: 'notBreaching'
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

# ==================== 输出 ====================

Outputs:
  # S3相关输出
  S3BucketName:
    Description: 'S3存储桶名称'
    Value: !Ref S3Bucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  S3BucketWebsiteURL:
    Description: 'S3网站端点URL'
    Value: !GetAtt S3Bucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-S3WebsiteURL'

  S3BucketDomainName:
    Description: 'S3存储桶域名'
    Value: !GetAtt S3Bucket.RegionalDomainName
    Export:
      Name: !Sub '${AWS::StackName}-S3DomainName'

  # CloudFront相关输出
  CloudFrontDomainName:
    Description: 'CloudFront分发域名'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomain'

  CloudFrontDistributionId:
    Description: 'CloudFront分发ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  CloudFrontURL:
    Description: 'CloudFront完整URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  # Lambda相关输出
  LambdaFunctionName:
    Description: 'Lambda@Edge函数名称'
    Value: !Ref LambdaEdgeFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunction'

  LambdaFunctionArn:
    Description: 'Lambda@Edge函数ARN（包含版本）'
    Value: !Ref LambdaFunctionVersion
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  # 其他输出
  OriginAccessIdentity:
    Description: 'CloudFront Origin Access Identity'
    Value: !Ref OriginAccessIdentity
    Export:
      Name: !Sub '${AWS::StackName}-OAI'

  # 测试URL
  TestURLs:
    Description: '测试URL列表'
    Value: !Sub |
      主页: https://${CloudFrontDistribution.DomainName}/
      Website1: https://${CloudFrontDistribution.DomainName}/website1/
      Website2: https://${CloudFrontDistribution.DomainName}/website2/
      App1: https://${CloudFrontDistribution.DomainName}/app1/
      404测试: https://${CloudFrontDistribution.DomainName}/website1/missing-page

  # 部署信息
  DeploymentInfo:
    Description: '部署信息'
    Value: !Sub |
      项目: ${ProjectName}
      环境: ${Environment}
      区域: ${AWS::Region}
      栈名称: ${AWS::StackName}
      部署时间: ${AWS::Timestamp}
